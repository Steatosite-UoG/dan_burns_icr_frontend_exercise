{"version":3,"sources":["ImageDisplayHelper.js","IndexPage.js","barChartByYear.js","GenePage.js","App.js","serviceWorker.js","index.js"],"names":["getImageTag","dataItem","src","image","alt","short_name","IndexPage","state","data","fetch","then","response","json","sort","a","b","localeCompare","setState","catch","error","console","className","this","map","item","key","to","pathname","id","Component","BarChartByYear","drawChart","margin","width","height","x","d3","rangeRound","y","range","xAxis","yAxis","svg","props","class","append","attr","forEach","d","date","value","domain","call","selectAll","style","text","yAxisLabel","enter","bandwidth","GenePage","window","scrollTo","undefined","location","find","match","params","geneId","full_name","family","num_structures","num_compounds","features","is_druggable","toString","is_enzyme","description","publications","App","path","exact","component","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.69b694c0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport function getImageTag(dataItem) {\r\n\treturn <img src={dataItem.image} alt={\"Structure representative of \" + dataItem.short_name} />\r\n}","import React, { Component } from 'react';\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport { Link } from \"react-router-dom\";\r\nimport { getImageTag } from './ImageDisplayHelper';\r\n\r\nclass IndexPage extends Component {\r\n    state = { data: [] }\r\n\r\n    componentDidMount() {\r\n        fetch('https://dburns-UoG.github.io/dan_burns_icr_frontend_exercise/data.json')\r\n            .then((response) => response.json())\r\n            .then((data) => {\r\n                data.sort((a, b) => a.short_name.localeCompare(b.short_name));\r\n                this.setState({\r\n                    data: data\r\n                });\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row className=\"index\">\r\n                {\r\n                    this.state.data.map((item) => {\r\n                        return (\r\n                            <Col key={item.short_name} >\r\n                                <Link to={{\r\n                                    pathname: item.id,\r\n                                    state: {\r\n                                        data: this.state.data\r\n                                    }\r\n                                }}>\r\n                                    <p>{item.short_name}</p>\r\n                                    {getImageTag(item)}\r\n                                </Link>\r\n                            </Col>\r\n                        );\r\n                    })\r\n                }\r\n            </Row>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IndexPage;","import { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass BarChartByYear extends Component {\r\n\r\n    componentDidMount() {\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart() {\r\n        var margin = { top: 20, right: 20, bottom: 70, left: 40 },\r\n            width = 600 - margin.left - margin.right,\r\n            height = 300 - margin.top - margin.bottom;\r\n\r\n        var x = d3.scaleBand().rangeRound([0, width], .05);\r\n        var y = d3.scaleLinear().range([height, 0]);\r\n\r\n        var xAxis = d3.axisBottom(x);\r\n        var yAxis = d3.axisLeft(y);\r\n\r\n        var svg = d3.select('.' + this.props.class).append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        var data = this.props.data;\r\n\r\n        data.forEach(function (d) {\r\n            d.date = d[0];\r\n            d.value = +d[1];\r\n        });\r\n\r\n        x.domain(data.map(function (d) { return d.date; }));\r\n        y.domain([0, d3.max(data, function (d) { return d.value; })]);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(xAxis)\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.8em\")\r\n            .attr(\"dy\", \"-.55em\")\r\n            .attr(\"transform\", \"rotate(-90)\");\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"y axis\")\r\n            .call(yAxis)\r\n            .append(\"text\")\r\n            .text(this.props.yAxisLabel)\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"9em\")\r\n            .attr(\"fill\", \"#000000\");\r\n\r\n        svg.selectAll(\"bar\")\r\n            .data(data)\r\n            .enter().append(\"rect\")\r\n            .style(\"fill\", \"steelblue\")\r\n            .attr(\"x\", function (d) { return x(d.date); })\r\n            .attr(\"width\", x.bandwidth() - 5)\r\n            .attr(\"y\", function (d) { return y(d.value); })\r\n            .attr(\"height\", function (d) { return height - y(d.value); });\r\n    }\r\n\r\n    render() {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport default BarChartByYear;","import React, { Component } from 'react';\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport BarChartByYear from './barChartByYear';\r\nimport { getImageTag } from './ImageDisplayHelper';\r\n\r\nclass GenePage extends Component {\r\n    render() {\r\n        window.scrollTo(0, 0);\r\n\r\n        if (this.props.location.state === undefined)\r\n            return ''\r\n\r\n        let dataItem = this.props.location.state.data.find((item) => item.id === this.props.match.params.geneId);\r\n\r\n        return (\r\n            <div className=\"gene\">\r\n                <Row>\r\n                    <h2>{dataItem.short_name}</h2>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        {getImageTag(dataItem)}\r\n                        <Row>\r\n                            <Col><p><em>Full name:</em></p></Col>\r\n                            <Col><p>{dataItem.full_name}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>Family:</em></p></Col>\r\n                            <Col><p>{dataItem.family}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>Gene ID:</em></p></Col>\r\n                            <Col><p>{dataItem.id}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>No. of structure:</em></p></Col>\r\n                            <Col><p>{dataItem.num_structures}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>No. of compounds:</em></p></Col>\r\n                            <Col><p>{dataItem.num_compounds}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>Is druggable?</em></p></Col>\r\n                            <Col><p>{dataItem.features.is_druggable.toString()}</p></Col>\r\n                        </Row>\r\n                        <Row>\r\n                            <Col><p><em>Is enzyme?</em></p></Col>\r\n                            <Col><p>{dataItem.features.is_enzyme.toString()}</p></Col>\r\n                        </Row>\r\n                    </Col>\r\n                    <Col>\r\n                        <p>{dataItem.description}</p>\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"publicationsHistory\">\r\n                    <BarChartByYear class=\"publicationsHistory\" data={dataItem.publications} yAxisLabel=\"No. of publications\" />\r\n                </Row>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default GenePage;","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport IndexPage from './IndexPage';\r\nimport GenePage from './GenePage';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            <header>\r\n                <Link to=\"/\">Return to Index</Link>\r\n            </header>\r\n\r\n            <Route path=\"/\" exact component={IndexPage} />\r\n            <Route path=\"/:geneId\" component={GenePage} />\r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}