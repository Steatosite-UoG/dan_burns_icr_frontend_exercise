{"version":3,"sources":["barChartByYear.js","App.js","serviceWorker.js","index.js"],"names":["BarChartByYear","this","drawChart","margin","width","height","x","d3","rangeRound","y","range","xAxis","yAxis","svg","props","class","append","attr","data","forEach","d","date","value","domain","map","call","selectAll","style","text","yAxisLabel","enter","bandwidth","Component","IndexPage","className","item","key","short_name","to","id","getImageTag","GenePage","match","window","scrollTo","dataItem","find","params","gene","full_name","family","num_structures","num_compounds","features","is_druggable","toString","is_enzyme","description","publications","src","image","alt","App","sort","a","b","localeCompare","path","exact","component","Boolean","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"snzEAuEeA,E,4LAjEPC,KAAKC,c,kCAIL,IAAIC,EAAgB,GAAhBA,EAA2B,GAA3BA,EAAuC,GAAvCA,EAAiD,GACjDC,EAAQ,IAAMD,EAAcA,EAC5BE,EAAS,IAAMF,EAAaA,EAE5BG,EAAIC,MAAeC,WAAW,CAAC,EAAGJ,GAAQ,KAC1CK,EAAIF,MAAiBG,MAAM,CAACL,EAAQ,IAEpCM,EAAQJ,IAAcD,GACtBM,EAAQL,IAAYE,GAEpBI,EAAMN,IAAU,IAAMN,KAAKa,MAAMC,OAAOC,OAAO,OAC9CC,KAAK,QAASb,EAAQD,EAAcA,GACpCc,KAAK,SAAUZ,EAASF,EAAaA,GACrCa,OAAO,KACPC,KAAK,YACF,aAAed,EAAc,IAAMA,EAAa,KAEpDe,EAAOjB,KAAKa,MAAMI,KAEtBA,EAAKC,QAAQ,SAAUC,GACnBA,EAAEC,KAAOD,EAAE,GACXA,EAAEE,OAASF,EAAE,KAGjBd,EAAEiB,OAAOL,EAAKM,IAAI,SAAUJ,GAAK,OAAOA,EAAEC,QAC1CZ,EAAEc,OAAO,CAAC,EAAGhB,IAAOW,EAAM,SAAUE,GAAK,OAAOA,EAAEE,UAElDT,EAAIG,OAAO,KACNC,KAAK,QAAS,UACdA,KAAK,YAAa,eAAiBZ,EAAS,KAC5CoB,KAAKd,GACLe,UAAU,QACVC,MAAM,cAAe,OACrBV,KAAK,KAAM,SACXA,KAAK,KAAM,UACXA,KAAK,YAAa,eAEvBJ,EAAIG,OAAO,KACNC,KAAK,QAAS,UACdQ,KAAKb,GACLI,OAAO,QACPY,KAAK3B,KAAKa,MAAMe,YAChBF,MAAM,cAAe,OACrBV,KAAK,KAAM,OACXA,KAAK,OAAQ,WAElBJ,EAAIa,UAAU,OACTR,KAAKA,GACLY,QAAQd,OAAO,QACfW,MAAM,OAAQ,aACdV,KAAK,IAAK,SAAUG,GAAK,OAAOd,EAAEc,EAAEC,QACpCJ,KAAK,QAASX,EAAEyB,YAAc,GAC9Bd,KAAK,IAAK,SAAUG,GAAK,OAAOX,EAAEW,EAAEE,SACpCL,KAAK,SAAU,SAAUG,GAAK,OAAOf,EAASI,EAAEW,EAAEE,W,+BAIvD,MAAO,O,GAhEcU,a,MCK7B,SAASC,IACL,OACI,kBAAC,IAAD,CAAKC,UAAU,SAEPhB,EAAKM,IAAI,SAACW,GACN,OACI,kBAAC,IAAD,CAAKC,IAAKD,EAAKE,YACX,kBAAC,IAAD,CAAMC,GAAIH,EAAKI,IACX,2BAAIJ,EAAKE,YACRG,EAAYL,QAU7C,SAASM,EAAT,GAA8B,IAAVC,EAAS,EAATA,MAChBC,OAAOC,SAAS,EAAG,GACnB,IAAIC,EAAW3B,EAAK4B,KAAK,SAACX,GAAD,OAAUA,EAAKI,KAAOG,EAAMK,OAAOC,OAE5D,OACI,yBAAKd,UAAU,QACX,kBAAC,IAAD,KACI,4BAAKW,EAASR,aAElB,kBAAC,IAAD,KACI,kBAAC,IAAD,KACKG,EAAYK,GACb,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,4CACR,kBAAC,IAAD,KAAK,2BAAIA,EAASI,aAEtB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,yCACR,kBAAC,IAAD,KAAK,2BAAIJ,EAASK,UAEtB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,0CACR,kBAAC,IAAD,KAAK,2BAAIL,EAASN,MAEtB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,mDACR,kBAAC,IAAD,KAAK,2BAAIM,EAASM,kBAEtB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,mDACR,kBAAC,IAAD,KAAK,2BAAIN,EAASO,iBAEtB,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,+CACR,kBAAC,IAAD,KAAK,2BAAIP,EAASQ,SAASC,aAAaC,cAE5C,kBAAC,IAAD,KACI,kBAAC,IAAD,KAAK,2BAAG,4CACR,kBAAC,IAAD,KAAK,2BAAIV,EAASQ,SAASG,UAAUD,eAG7C,kBAAC,IAAD,KACI,2BAAIV,EAASY,eAGrB,kBAAC,IAAD,CAAKvB,UAAU,uBACX,kBAAC,EAAD,CAAgBnB,MAAM,sBAAsBG,KAAM2B,EAASa,aAAc7B,WAAW,0BAMpG,SAASW,EAAYK,GACjB,OAAO,yBAAKc,IAAKd,EAASe,MAAOC,IAAK,+BAAiChB,EAASR,aAmBrEyB,MAhBf,WAII,OAFA5C,EAAK6C,KAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAE3B,WAAW6B,cAAcD,EAAE5B,cAG7C,kBAAC,IAAD,KACI,gCACI,kBAAC,IAAD,CAAMC,GAAG,KAAT,oBAGJ,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAK,EAACC,UAAWpC,IACjC,kBAAC,IAAD,CAAOkC,KAAK,SAASE,UAAW5B,MClFxB6B,QACW,cAA7B3B,OAAO4B,SAASC,UAEe,UAA7B7B,OAAO4B,SAASC,UAEhB7B,OAAO4B,SAASC,SAAS9B,MACvB,2DCZN+B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.a8c7f342.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport * as d3 from \"d3\";\r\n\r\nclass BarChartByYear extends Component {\r\n\r\n    componentDidMount() {\r\n        this.drawChart();\r\n    }\r\n\r\n    drawChart() {\n        var margin = { top: 20, right: 20, bottom: 70, left: 40 },\r\n            width = 600 - margin.left - margin.right,\r\n            height = 300 - margin.top - margin.bottom;\r\n\r\n        var x = d3.scaleBand().rangeRound([0, width], .05);\r\n        var y = d3.scaleLinear().range([height, 0]);\r\n\r\n        var xAxis = d3.axisBottom(x);\r\n        var yAxis = d3.axisLeft(y);\r\n\r\n        var svg = d3.select('.' + this.props.class).append(\"svg\")\r\n            .attr(\"width\", width + margin.left + margin.right)\r\n            .attr(\"height\", height + margin.top + margin.bottom)\r\n            .append(\"g\")\r\n            .attr(\"transform\",\r\n                \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n        var data = this.props.data;\r\n\r\n        data.forEach(function (d) {\r\n            d.date = d[0];\r\n            d.value = +d[1];\r\n        });\r\n\r\n        x.domain(data.map(function (d) { return d.date; }));\r\n        y.domain([0, d3.max(data, function (d) { return d.value; })]);\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"x axis\")\r\n            .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n            .call(xAxis)\r\n            .selectAll(\"text\")\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"-.8em\")\r\n            .attr(\"dy\", \"-.55em\")\r\n            .attr(\"transform\", \"rotate(-90)\");\r\n\r\n        svg.append(\"g\")\r\n            .attr(\"class\", \"y axis\")\r\n            .call(yAxis)\r\n            .append(\"text\")\r\n            .text(this.props.yAxisLabel)\r\n            .style(\"text-anchor\", \"end\")\r\n            .attr(\"dx\", \"9em\")\r\n            .attr(\"fill\", \"#000000\");\r\n\r\n        svg.selectAll(\"bar\")\r\n            .data(data)\r\n            .enter().append(\"rect\")\r\n            .style(\"fill\", \"steelblue\")\r\n            .attr(\"x\", function (d) { return x(d.date); })\r\n            .attr(\"width\", x.bandwidth() - 5)\r\n            .attr(\"y\", function (d) { return y(d.value); })\r\n            .attr(\"height\", function (d) { return height - y(d.value); });\r\n    }\r\n\r\n    render() {\r\n        return ''\r\n    }\r\n}\r\n\r\nexport default BarChartByYear;","import Col from 'react-bootstrap/Col'\nimport Row from 'react-bootstrap/Row'\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport data from './data.json';\nimport BarChartByYear from './barChartByYear';\nimport './App.css';\n\nfunction IndexPage() {\r\n    return (\r\n        <Row className=\"index\">\n            {\n                data.map((item) => {\r\n                    return (\r\n                        <Col key={item.short_name} >\r\n                            <Link to={item.id}>\r\n                                <p>{item.short_name}</p>\r\n                                {getImageTag(item)}\r\n                            </Link>\r\n                        </Col>\r\n                    );\r\n                })\n            }\n        </Row>\n    );\r\n}\n\nfunction GenePage({ match }) {\n    window.scrollTo(0, 0);\n    let dataItem = data.find((item) => item.id === match.params.gene);\n\n    return (\n        <div className=\"gene\">\n            <Row>\n                <h2>{dataItem.short_name}</h2>\n            </Row>\n            <Row>\n                <Col>\n                    {getImageTag(dataItem)}\n                    <Row>\n                        <Col><p><em>Full name:</em></p></Col>\n                        <Col><p>{dataItem.full_name}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>Family:</em></p></Col>\n                        <Col><p>{dataItem.family}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>Gene ID:</em></p></Col>\n                        <Col><p>{dataItem.id}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>No. of structure:</em></p></Col>\n                        <Col><p>{dataItem.num_structures}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>No. of compounds:</em></p></Col>\n                        <Col><p>{dataItem.num_compounds}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>Is druggable?</em></p></Col>\n                        <Col><p>{dataItem.features.is_druggable.toString()}</p></Col>\n                    </Row>\n                    <Row>\n                        <Col><p><em>Is enzyme?</em></p></Col>\n                        <Col><p>{dataItem.features.is_enzyme.toString()}</p></Col>\n                    </Row>\n                </Col>\n                <Col>\n                    <p>{dataItem.description}</p>\n                </Col>\n            </Row>\n            <Row className=\"publicationsHistory\">\n                <BarChartByYear class=\"publicationsHistory\" data={dataItem.publications} yAxisLabel=\"No. of publications\" />\n            </Row>\n        </div>\n    );\r\n}\n\nfunction getImageTag(dataItem) {\n    return <img src={dataItem.image} alt={\"Structure representative of \" + dataItem.short_name} />\r\n}\n\nfunction App() {\n\n    data.sort((a, b) => a.short_name.localeCompare(b.short_name));\n\n    return (\n        <Router>\r\n            <header>\r\n                <Link to=\"/\">Return to Index</Link>\r\n            </header>\r\n\r\n            <Route path=\"/\" exact component={IndexPage} />\r\n            <Route path=\"/:gene\" component={GenePage} />\r\n        </Router>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}